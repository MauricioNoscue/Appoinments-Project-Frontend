pipeline {
    agent any

    environment {
        DOTNET_NOLOGO = '1'
        ENVIRONMENT = ''
        ENV_DIR = ''
        ENV_FILE = ''
        COMPOSE_FILE = ''
        IMAGE_NAME = ''
    }

    stages {

        stage('Checkout c√≥digo fuente') {
            steps {
                echo "üì• Clonando repositorio del frontend..."
                checkout scm
            }
        }

        stage('Detectar entorno') {
            steps {
                script {
                    def envFileRoot = '.env'
                    
                    echo "üîç Verificando existencia del archivo .env ra√≠z..."
                    if (!fileExists(envFileRoot)) {
                        error "‚ùå No existe el archivo .env ra√≠z en el proyecto."
                    }

                    echo "üìñ Leyendo archivo .env..."
                    def rawContent = readFile(envFileRoot)
                    echo "üìÑ Contenido del .env:\n${rawContent}"
                    
                    // Limpiar contenido
                    def cleanContent = rawContent
                        .replaceAll('\uFEFF', '')
                        .replaceAll('\r', '')
                        .trim()

                    echo "üßπ Contenido limpio:\n${cleanContent}"

                    // Buscar ENVIRONMENT
                    def matcher = cleanContent =~ /(?m)^\s*ENVIRONMENT\s*=\s*([^\s#]+)/
                    
                    if (matcher.find()) {
                        def detectedEnv = matcher.group(1).trim()
                        echo "‚úÖ ENVIRONMENT encontrado: '${detectedEnv}'"
                        
                        // Validar que sea un entorno v√°lido
                        if (detectedEnv in ['staging', 'qa', 'prod', 'develop']) {
                            env.ENVIRONMENT = detectedEnv
                        } else {
                            error "‚ùå ENVIRONMENT='${detectedEnv}' no es v√°lido. Use: staging, qa, prod o develop"
                        }
                    } else {
                        error "‚ùå No se encontr√≥ ENVIRONMENT en .env. Formato esperado: ENVIRONMENT=staging"
                    }

                    // Configurar rutas
                    env.ENV_DIR = "devops/${env.ENVIRONMENT}"
                    env.ENV_FILE = "${env.ENV_DIR}/.env"
                    env.COMPOSE_FILE = "${env.ENV_DIR}/docker-compose.yml"
                    env.IMAGE_NAME = "appointments-front-${env.ENVIRONMENT}"

                    echo """
                    ‚úÖ Configuraci√≥n del entorno:
                    üéØ Entorno: ${env.ENVIRONMENT}
                    üìÅ Directorio: ${env.ENV_DIR}
                    üìÑ Archivo env: ${env.ENV_FILE}
                    üê≥ Compose: ${env.COMPOSE_FILE}
                    üß± Imagen: ${env.IMAGE_NAME}
                    """

                    // Verificar que existan los archivos del entorno
                    if (!fileExists(env.ENV_FILE)) {
                        error "‚ùå No existe ${env.ENV_FILE}"
                    }
                    if (!fileExists(env.COMPOSE_FILE)) {
                        error "‚ùå No existe ${env.COMPOSE_FILE}"
                    }
                }
            }
        }

        stage('Construir imagen Angular') {
            steps {
                script {
                    echo "üß± Construyendo imagen Angular (${env.ENVIRONMENT})..."
                    
                    sh """
                        set -e
                        echo "üìã Verificando archivo ${ENV_FILE}..."
                        cat ${ENV_FILE}
                        
                        echo "üîç Extrayendo API_BASE_URL..."
                        API_BASE_URL=\$(grep '^API_BASE_URL' ${ENV_FILE} | cut -d '=' -f2 | tr -d ' "')
                        
                        if [ -z "\$API_BASE_URL" ]; then
                            echo "‚ö†Ô∏è  API_BASE_URL vac√≠o, usando valor por defecto"
                            API_BASE_URL="http://localhost:8080"
                        fi
                        
                        echo "üåê API_BASE_URL=\$API_BASE_URL"
                        echo "üß± Imagen: ${IMAGE_NAME}:latest"
                        
                        docker build -t ${IMAGE_NAME}:latest \
                            --build-arg NODE_ENV=${ENVIRONMENT} \
                            --build-arg API_BASE_URL=\$API_BASE_URL \
                            -f Dockerfile .
                    """
                }
            }
        }

        stage('Desplegar contenedor Angular') {
            steps {
                dir("${env.ENV_DIR}") {
                    sh """
                        set -e
                        echo "üöÄ Desplegando entorno ${ENVIRONMENT}..."
                        echo "üìÇ Directorio actual: \$(pwd)"
                        echo "üìÑ Archivos disponibles:"
                        ls -la
                        
                        docker compose --env-file .env down || true
                        docker compose --env-file .env up -d --build
                        
                        echo "‚úÖ Contenedores desplegados:"
                        docker compose --env-file .env ps
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Despliegue completado correctamente (${env.ENVIRONMENT})"
        }
        failure {
            echo "üí• Error durante el despliegue del frontend (${env.ENVIRONMENT})"
        }
        always {
            echo "üßπ Limpieza final completada."
        }
    }
}